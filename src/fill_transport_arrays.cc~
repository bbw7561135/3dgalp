
//**.****|****.****|****.****|****.****|****.****|****.****|****.****|****.****|
// * create_transport_arrays.cc *                  galprop package * 10/12/2003 
//**"****!****"****!****"****!****"****!****"****!****"****!****"****!****"****|

#include<sstream>
#include<string>

#include<cstring>

#include<ErrorLogger.h>
#include<Processes_Interface.h>
#include<Nuclei_Interface.h>

#include"galprop_classes.h"
#include"galprop_internal.h"

#include"definition.h"
#include"Galpani.h"

using namespace std;//AWS20050624

static int key=-1;

int Galpani::fill_transport_arrays(Particle& particle){

  INFO("Entering Galprop 3D transport "); cout << "Now in " << __FILE__ << endl;

  int stat=0, A1,Z2,A2,K_electron; // IMOS20010816
  int galdef_network_par=0;  // imos network, use everywhere IMOS20010816
  double t_half[2]; // IMOS20010816
  double fragment_p,fragment_He,PP_inel,PA_inel,aPP_non,aPA_non,aPP_ann,aPA_ann; // IMOS20000607
   
  // ASSIGNING PRIMARY SOURCE FUNCTION
  
  INFO("Assigning primary source function");
  
  double g_0=galdef.nuc_g_0, 
    rigid_br0=galdef.nuc_rigid_br0,
    rigid_br=galdef.nuc_rigid_br,                           // IMOS20000607
    g_1=galdef.nuc_g_1,
    g_2=galdef.nuc_g_2;

  // Check for specific injection spectra
  std::map<std::pair<int, int>, Galdef::specProperties>::iterator it = galdef.iso_inj_spectra.find(std::pair<int,int>(particle.Z,particle.A));
  if (it != galdef.iso_inj_spectra.end()) {
     g_0 = it->second.g_0;
     g_1 = it->second.g_1;
     g_2 = it->second.g_2;
     rigid_br0 = it->second.rigid_br0;
     rigid_br = it->second.rigid_br;
  }

  
  const string priElecStr = "primary_electrons";
  
  if (priElecStr == particle.name) {//strcmp(particle.name,"primary_electrons")==0) {
    g_0=galdef.electron_g_0;                                    // IMOS20031012
    rigid_br0=galdef.electron_rigid_br0;
    g_1=galdef.electron_g_1;
    rigid_br=galdef.electron_rigid_br;
    g_2=galdef.electron_g_2;
  }
  ostringstream ost;
  ost<<particle.name<<" g_0="<<g_0<<"  rigid_br0= "<<rigid_br0  // IMOS20031012
     <<" g_1="<<g_1<<"  rigid_br= " <<rigid_br <<" g_2="<<g_2;
  INFO(ost.str());
  
  particle.primary_source_function = 0.; // IMOS20020418 whole 2D/3D particle.primary_source_function loops are changed
  
  //To allow for different source distribution of electrons and nuclei
  std::vector<double>* parameters;
  std::vector<double>* source_values;
  std::vector<double>* source_radius;
  int source_model;
  
  if (priElecStr != particle.name) {
    
    source_model = galdef.source_model;
    parameters = &galdef.source_parameters;
    source_values = &galdef.source_values;
    source_radius = &galdef.source_radius;
    
  } else {
    
    source_model = galdef.source_model_electron;
    parameters = &galdef.source_parameters_electron;
    source_values = &galdef.source_values_electron;
    source_radius = &galdef.source_radius_electron;
    
  }

  //DM particles should be left out of this
  if ( particle.name.substr(0,2) != "DM" &&
        //And no need to do this for 0 primary abundance
        particle.primary_abundance != 0 ) {

     //Normalization for the spectral shape should be evaluated at proton_norm_Ekin
     //Calculate for convenience the corresponding rigidity and momentum
     double pNorm(-1.), EtotNorm(1), betaNorm(0), gammaNorm(1), rigidityNorm(0);
     double EkinNorm(galdef.proton_norm_Ekin);
     kinematic(particle.Z, particle.A, particle.species, pNorm, EkinNorm,
           EtotNorm, betaNorm, gammaNorm, rigidityNorm, 0);

     double specNorm = particle.primary_abundance;
     
     //Use the same stupid swithces as in the spectral shapes loop.  This should be streamlined.
     if (galdef.inj_spectrum_type == "Etot") {

        specNorm *= pow(EtotNorm, g_2);

     } else {

        if (rigidityNorm < rigid_br0) {
           specNorm *= pow(rigidityNorm/rigid_br0,g_0)*pow(rigid_br0/rigid_br,g_1);
        } else if (rigidityNorm < rigid_br) {
           specNorm *= pow(rigidityNorm/rigid_br,g_1);
        } else {
           specNorm *= pow(rigidityNorm/rigid_br,g_2);
        }

     }
        
     if (galdef.inj_spectrum_type == "beta_rig") 
        specNorm *= sqrt(1. + pow(2.e3/rigidityNorm, 2.)); 

     if (galdef.inj_spectrum_type=="dirac") 
        specNorm = particle.primary_abundance;

     if(galdef.inj_spectrum_type=="step")
        specNorm = particle.primary_abundance;

     if(galdef.inj_spectrum_type=="expcutoff")
        specNorm = particle.primary_abundance * pow(EkinNorm,g_2)*exp(EkinNorm/rigid_br);

     if(galdef.inj_spectrum_type=="doubleexpcutoff")
        specNorm = particle.primary_abundance * pow(EkinNorm,g_2)*exp(EkinNorm/rigid_br)*exp(rigid_br0/EkinNorm);


     if (particle.A > 1)
        specNorm /= particle.A;

     //Spectral shape is (currently) independent of position.  Move it outside the loop.
     std::vector<double> spec_shape(particle.n_pgrid, 0.0);
     for (int ip = 0; ip < particle.n_pgrid; ++ip) {

        //Options to facilitate calculating the spectra piecewise for
        //gamma-ray and CR fitting
        if (particle.rigidity[ip] <= galdef.rigid_min || particle.rigidity[ip] > galdef.rigid_max) 
           continue;
	if (particle.Ekin[ip] <= galdef.inj_Ekin_min || particle.Ekin[ip] > galdef.inj_Ekin_max)
           continue;

        //TODO: This switch statement is rather arcane, should be fixed
        if (galdef.inj_spectrum_type == "Etot") {
           spec_shape[ip] = pow(particle.Etot[ip],-g_2); // IMOS20000613
           continue;
        }
        else {

           if(particle.rigidity[ip]< rigid_br0) // IMOS20031012
              spec_shape[ip] = pow(particle.rigidity[ip]/rigid_br0,-g_0)*pow(rigid_br0/rigid_br,-g_1);
           if (rigid_br0 <= particle.rigidity[ip] && particle.rigidity[ip]< rigid_br)
              spec_shape[ip] = pow(particle.rigidity[ip]/rigid_br, -g_1);

           if(rigid_br <= particle.rigidity[ip])
              spec_shape[ip] =pow(particle.rigidity[ip]/rigid_br, -g_2);

        }

        if (galdef.inj_spectrum_type == "beta_rig") 
           spec_shape[ip] /= sqrt(1. + pow(2.e3/particle.rigidity[ip], 2.)); // IMOS20011210

        //new spectral shapes  AWS20101202
        if (galdef.inj_spectrum_type=="dirac") {
           const double Edirac = rigid_br;

           if (log(Edirac) >= log(particle.Ekin[ip]) - 0.5*log(particle.Ekin_factor) && 
                 log(Edirac) < log(particle.Ekin[ip]) + 0.5*log(particle.Ekin_factor)) {
              spec_shape[ip] = 1.;

           } else 
              spec_shape[ip] = 0.;

           continue;

        } 

        if(galdef.inj_spectrum_type=="step")
        {
           if (rigid_br >= particle.Ekin[ip]) spec_shape[ip]=1.0;
           else spec_shape[ip]=0.0;
           continue;
        }

        if(galdef.inj_spectrum_type=="expcutoff")
        {
           spec_shape[ip]=pow(particle.Ekin[ip],-g_2)*exp(-particle.Ekin[ip]/rigid_br);
           continue;
        }

        if(galdef.inj_spectrum_type=="doubleexpcutoff")
        {
           spec_shape[ip]=pow(particle.Ekin[ip],-g_2)*exp(-particle.Ekin[ip]/rigid_br)*exp(-rigid_br0/particle.Ekin[ip]);
           continue;
        }
        //                      AWS20101201
     }


  
     if (2 == galdef.n_spatial_dimensions) {


        int ir=0, iz=particle.n_zgrid/2;
        if(galdef.source_specification==1)
        {
           for (int ip = 0; ip < particle.n_pgrid; ++ip) {
              particle.primary_source_function.d2[ir][iz].s[ip]=specNorm*spec_shape[ip];
           }
        }
	for(ir=0; ir<particle.n_rgrid; ir++)
	  {
	    if(galdef.source_specification==2)
            {
               for (int ip = 0; ip < particle.n_pgrid; ++ip) {
                  particle.primary_source_function.d2[ir][iz].s[ip]=specNorm*spec_shape[ip];
               }
            }
            for(iz=0; iz<particle.n_zgrid; iz++)
            {
               if (0 == galdef.source_specification) {
                  const double sd = source_distribution(particle. r[ir], 0, particle.z[iz], source_model, *parameters, *source_values, *source_radius);
                  for (int ip = 0; ip < particle.n_pgrid; ++ip) {
                     particle.primary_source_function.d2[ir][iz].s[ip] = sd *specNorm*spec_shape[ip];


                     if (galdef.verbose >= 1) {
                        std::ostringstream ost1;
                        ost1<<"r z source_distribution  "<<particle.r[ir]<<" "<<particle.z[iz] <<" "<<sd;
                        INFO(ost1.str());
                     }
                  }
               }
            }
	  }
      }
    
    //if (priElecStr == particle.name)
    //exit(0);
    
    if (3 == galdef.n_spatial_dimensions) {
    
       int ix = particle.n_xgrid/2;
       int iy = particle.n_ygrid/2;
       int iz = particle.n_zgrid/2;

       if (1 == galdef.use_symmetry) 
          ix = iy = iz = 0;

       if (1 == galdef.source_specification)
          for (int ip = 0; ip < particle.n_pgrid; ++ip) {
             particle.primary_source_function.d3[ix][iy][iz].s[ip] = specNorm;
          }

       for(ix=0; ix<particle.n_xgrid; ix++) {

          for(iy=0; iy<particle.n_ygrid; iy++) {

             if (2 == galdef.source_specification)
                for (int ip = 0; ip < particle.n_pgrid; ++ip) {
                   particle.primary_source_function.d3[ix][iy][iz].s[ip] = specNorm;
                }

             for(iz=0; iz<particle.n_zgrid; iz++) {
	       
	          const double sd = source_distribution(particle.x[ix],
                      particle.y[iy],
                      particle.z[iz],
                      source_model,
                      *parameters,
                      *source_values,
                      *source_radius);
                for (int ip = 0; ip < particle.n_pgrid; ++ip) {
                   if (0 == galdef.source_specification)
                      particle.primary_source_function.d3[ix][iy][iz].s[ip] = sd*specNorm;

                   // source spectral index dispersion

                   double spec_dg_ratio(1);                             //AWS20010411

                   if (1 == galdef.SNR_events) {

                      if ("primary_electrons" == particle.name) { 

                         spec_dg_ratio=
                            pow(particle.rigidity[ip]/galdef.SNR_electron_dgpivot,1.*galaxy.SNR_electron_dg.d3[ix][iy][iz].s[0]);

                         if(galdef.verbose==-501) { // selectable debug

                            std::ostringstream ost1;
                            ost1<<"SNR_electron_dg="<<galaxy.SNR_electron_dg.d3[ix][iy][iz].s[0]
                               <<" rigidity="<<particle.rigidity[ip]<<"  spec_dg_ratio="<<spec_dg_ratio;
                            INFO(ost1.str());
                         }
                      } //electrons
                      else {

                         spec_dg_ratio=
                            pow(particle.rigidity[ip]/galdef.SNR_nuc_dgpivot,     1.*galaxy.SNR_nuc_dg.     d3[ix][iy][iz].s[0]);

                         if(galdef.verbose==-501) { // selectable debug

                            std::ostringstream ost1;
                            ost1<<"SNR_nuc_dg="<<galaxy.SNR_nuc_dg.d3[ix][iy][iz].s[0] 
                               <<" rigidity="<<particle.rigidity[ip]<<"  spec_dg_ratio="<<spec_dg_ratio;
                            INFO(ost1.str());
                         }
                      }//nucleons		     
                   }// if galdef.SNR_events

                   particle.primary_source_function.d3[ix][iy][iz].s[ip]*=spec_shape[ip]*spec_dg_ratio;
                } //ip
             
             } //iz

          } //iy

       } //ix
    
    } // 3D
  
    // CASE: PRIMARY NUCLEI                                                         AWS20000601.1
    
    if ("primary_electrons" != particle.name) //strcmp(particle.name,"primary_electrons")!=0)
      {
	particle.primary_source_function *= galdef.source_normalization;
	ost.str("");
	ost<<" >>>>>>>>>>>>>>>>>>> norm "<<galdef.source_normalization<<" >>>>>>>>>>>>>>>>>>>";
	INFO(ost.str());
      }
    
    // CASE: PRIMARY ELECTRONS                                                      IMOS20031016
    
    if ("primary_electrons" == particle.name) //strcmp(particle.name,"primary_electrons")==0)
      {
	particle.primary_source_function *= galdef.electron_source_normalization;
	ost.str("");
	ost<<" >>>>>>>>>> electron_norm "<<galdef.electron_source_normalization<<" >>>>>>>>>>>>>>>>>>>";
	INFO(ost.str());
      }
  
  } //End of DM exclusion if

  if (galdef.verbose == -123) {
     std::cerr<<particle.name<<" Primary source function:"<<std::endl;
     particle.primary_source_function.print();
  }
  
  // ASSIGNING DIFFUSION COEFFICIENT
  
  INFO("      assigning diffusion coefficient");
  
  ////////////////////////V//IMOS20030214 all region
  int iprotons=-1;
  
  if(galdef.diff_reacc > 5)
    {
      // identify CR protons
      for(int i=n_species-1; i>=0; --i)  
	if(101==100*gcr[i].Z+gcr[i].A)
	  {
            iprotons=i;
	    ost.str("");
	    ost<<"  CR protons found as species #"<<iprotons;
	    INFO(ost.str());
	    break;
	  }
      if(iprotons==-1) { WARNING("CR protons not found!"); return 1; }
      ost.str("");
      ost<<"create_transport_arrays>> "<<particle.Z*100+particle.A<<" "<<particle.p[0];
      INFO(ost.str());
      
      // Zero approximation proton spectrum for calculation of damping
      /*
      if(gcr[iprotons].cr_density.max() == 0)
	{
	  if(galdef.n_spatial_dimensions==2)
            for(int ir=0; ir<particle.n_rgrid; ir++)
	      for(int iz=0; iz<particle.n_zgrid; iz++)
		for(int ip=0; ip<particle.n_pgrid; ip++)
		  {
		    gcr[iprotons].cr_density.d2[ir]    [iz].s[ip] = 
		      (1.-(galdef.z_min+iz*galdef.dz)/galdef.z_max)
		      *galdef.proton_norm_flux *pow(gcr[iprotons].Etot[ip]/galdef.proton_norm_Ekin, -2.75);
		    //cout<<"create_transport_arrays>> "<<gcr[iprotons].cr_density.d2[ir]    [iz].s[ip]<<endl;
                  }
	  
	  if(galdef.n_spatial_dimensions==3)
            for(int ix=0; ix<particle.n_xgrid; ix++)
	      for(int iy=0; iy<particle.n_ygrid; iy++)
		for(int iz=0; iz<particle.n_zgrid; iz++)
		  for(int ip=0; ip<particle.n_pgrid; ip++)
		    gcr[iprotons].cr_density.d3[ix][iy][iz].s[ip] = 
		      (1.-(galdef.z_min+iz*galdef.dz)/galdef.z_max)
		      *galdef.proton_norm_flux *pow(gcr[iprotons].Etot[ip]/galdef.proton_norm_Ekin, -2.75);
	}
        */
      key=1;
    }
  //   cout<<"create_transport_arrays>> "<<iprotons<<" "<<gcr[iprotons].cr_density.d2[9][9].s[10]<< " "<<protons.d2[9][9].s[10]<<endl;
  //   for(int ip=0; ip<particle.n_pgrid; ip++) cout<<" "<<protons.d2[9][9].s[ip];
  //   cout<<endl;
  ////////////////////////^//IMOS20030214

  
  if(galdef.n_spatial_dimensions==2)
    {
      ost.str("");
      ost<<" Calculating diffusion coefficients (ir, iz, ip): ("<<particle.n_rgrid<<", "<<particle.n_zgrid<<", "<<particle.n_pgrid<<")";
      INFO(ost.str());

      //Store Dxx distribution for debugging info in wavedamping
      Distribution D_xx_old(particle.Dxx);

      //TODO: possibly add some precalculations for the wave damping sum, like the index, inner integral, etc.
//#pragma omp parallel for schedule(dynamic) default(shared)
      for(int ir=0; ir<particle.n_rgrid-1; ++ir)
	for(int iz=1; iz<particle.n_zgrid-1; ++iz)
	  for(int ip=particle.n_pgrid-1; ip>=0; --ip) // IMOS20060330 changed to reverse order (Wave-particle interactions)
	    {
	      // modified  by Wei Liu, 2018.12.18
#ifdef ITERAT
	      D_para(particle, iprotons, ir, 0, 0, iz, ip);
	      D_perp(particle, iprotons, ir, 0, 0, iz, ip);
#else
	      D_xx(particle,iprotons, ir, 0, 0, iz, ip); //array assigned in D_xx IMOS20030129
#endif
	      particle.Dpp.d2[ir][iz].s[ip] =D_pp(particle.p[ip],galdef.D_g_1,alfvenVelocity(ir,0,0,iz),particle.Dxx.d2[ir][iz].s[ip]);
	    }

      //Assign the boundary of D_xx
      for(int iz=0; iz<particle.n_zgrid; ++iz)
         for(int ip=particle.n_pgrid-1; ip>=0; --ip) // IMOS20060330 changed to reverse order (Wave-particle interactions)
         {
            particle.Dxx.d2[particle.n_rgrid-1][iz].s[ip] = particle.Dxx.d2[particle.n_rgrid-2][iz].s[ip];
            particle.Dpp.d2[particle.n_rgrid-1][iz].s[ip] = D_pp(particle.p[ip],galdef.D_g_1,alfvenVelocity(particle.n_rgrid-1,0,0,iz),particle.Dxx.d2[particle.n_rgrid-1][iz].s[ip]);
         }
      for(int ir=0; ir<particle.n_rgrid; ++ir)
         for(int ip=particle.n_pgrid-1; ip>=0; --ip) // IMOS20060330 changed to reverse order (Wave-particle interactions)
         {
            particle.Dxx.d2[ir][0].s[ip] = particle.Dxx.d2[ir][1].s[ip];
            particle.Dpp.d2[ir][0].s[ip] = D_pp(particle.p[ip],galdef.D_g_1,alfvenVelocity(ir,0,0,0),particle.Dxx.d2[ir][0].s[ip]);
            particle.Dxx.d2[ir][particle.n_zgrid-1].s[ip] = particle.Dxx.d2[ir][particle.n_zgrid-2].s[ip];
            particle.Dpp.d2[ir][particle.n_zgrid-1].s[ip] = D_pp(particle.p[ip],galdef.D_g_1,alfvenVelocity(ir,0,0,particle.n_zgrid-1),particle.Dxx.d2[ir][particle.n_zgrid-1].s[ip]);
         }

      
      //Calculate the maximum relative error for information purposes
      //TODO: Use something along this lines as criteria for stopping the wave damping iterations
      double maxRelErr(0);
      for(int ir=0; ir<particle.n_rgrid; ++ir)
	for(int iz=0; iz<particle.n_zgrid; ++iz)
	  for(int ip=particle.n_pgrid-1; ip>=0; --ip) 
          {
             const double relErr = (particle.Dxx.d2[ir][iz].s[ip] - D_xx_old.d2[ir][iz].s[ip])/particle.Dxx.d2[ir][iz].s[ip];
             if (fabs(relErr) > fabs(maxRelErr))
                maxRelErr = relErr;
          }
      ost.str("");
      ost<<"Maximum relative error in D_xx: "<<maxRelErr;
      INFO(ost.str());
     
      // modified by Wei Liu, 2018.12.18
#ifdef ITERAT
      diffusion_tensor(particle);
#endif
    }
  if(galdef.n_spatial_dimensions==3)
    {
      ost.str("");
      ost<<" Calculating diffusion coefficients (ix, iy, iz, ip): ("<<particle.n_xgrid<<", "<<particle.n_ygrid<<", "<<particle.n_zgrid<<", "<<particle.n_pgrid<<")";
      INFO(ost.str());
#pragma omp parallel for schedule(dynamic) default(shared)
      for(int ix=0; ix<particle.n_xgrid; ++ix)
	for(int iy=0; iy<particle.n_ygrid; ++iy)
	  for(int iz=0; iz<particle.n_zgrid; ++iz)
	    for(int ip=particle.n_pgrid-1; ip>=0; --ip) // IMOS20060330 changed to reverse order
	      {
	      // modified  by Wei Liu, 2018.12.18
#ifdef ITERAT
		D_para(particle, iprotons, 0, ix, iy, iz, ip);
		D_perp(particle, iprotons, 0, ix, iy, iz, ip);
#else
		D_xx(particle,iprotons, 0, ix, iy, iz, ip); //array assigned in D_xx IMOS20030129
#endif
		particle.Dpp.d3[ix][iy][iz].s[ip] =D_pp(particle.p[ip], galdef.D_g_1, alfvenVelocity(0,ix,iy,iz), particle.Dxx.d3[ix][iy][iz].s[ip]);
	      }  // p

      // modified by Wei Liu, 2018.12.18
#ifdef ITERAT
      diffusion_tensor(particle); // both isotropic and anisotropic diffusion 
#endif
    } 
  if(galdef.verbose>=2)
    {
      ost.str("");
      ost<< "spatial   diffusion coefficient Dxx  for species "<<particle.name;
      INFO(ost.str());
      particle.Dxx.print();
      ost.str("");
      ost<< "momentum diffusion coefficient Dpp  for species "<<particle.name;
      INFO(ost.str());
      particle.Dpp.print();
    }

  // modified by Wei Liu, add psudo source term
#ifdef ITERAT
  int i_species;
  for(int i=n_species-1; i>=0; --i)
    if(particle.Z == gcr_tmp[i].Z && particle.A == gcr_tmp[i].A) 
      i_species = i;

  primary_pseudo_source(particle, gcr_tmp[i_species]);
#endif
  
  // ASSIGNING FRAGMENTATION RATE

   INFO("======== assigning fragmentation rate ======== ");
   int ZH=1, ZHe=2;                                                    //  IMOS20010816
   double attach_H=0., attach_He=0., strip_H=0., strip_He=0.;          //  IMOS20010816

   particle.fragment=0.0;
   if(particle.A!=0)
   {
     double CSratio,CStot_ratio;
     
     for(int ip=0; ip<particle.n_pgrid; ip++)
       {                                                             // IMOS20000607 whole segment
	 A1 = 1;                                                    // nucleus
	 Z2 = particle.Z;  A2 = particle.A;                         // - " -
	 if(101==100*Z2+A2) { Z2 = 2;  A2 = 4; }                    // protons
	 if(-99==100*Z2+A2) { A1 =-1;  Z2 = 2;  A2 = 4; }           // antiprotons
	 processes::nucleon_cs(galdef.total_cross_section,particle.Ekin[ip]*1.e-3,A1,Z2,A2, // AWS20010620
		    &PP_inel,&PA_inel,&aPP_non,&aPA_non,&aPP_ann,&aPA_ann);
	 nuclei::He_to_H_CS(particle.Ekin[ip]*1.e-3,particle.Z,particle.A,999,999,&CSratio,&CStot_ratio);
	 
	 fragment_p = PA_inel;                                      // nuclei
	 fragment_He= PA_inel*CStot_ratio;                          // -"- 

// ELECTRON ATTACHMENT/STRIPPING CROSS SECTION                                  IMOS20010816
	 
	 if(galdef.K_capture)
	   {
	     for(K_electron=0;K_electron<=galdef.K_capture;K_electron++) 
	       nucdata(galdef_network_par,particle.Z,particle.A,K_electron,particle.Z,particle.A,&Z2,&A2,&t_half[K_electron]);
	   
	     if(t_half[0] != t_half[1])
	       {
		 nuclei::Kcapture_cs(particle.Ekin[ip],particle.Z,ZH, &attach_H ,&strip_H );
		 nuclei::Kcapture_cs(particle.Ekin[ip],particle.Z,ZHe,&attach_He,&strip_He);
		 if(particle.K_electron)
		   {
                     fragment_p += strip_H ;
                     fragment_He+= strip_He;
		   } else
		     {
		       fragment_p += attach_H ;
		       fragment_He+= attach_He;
		     }
		 
		 if(galdef.verbose==-502)// selectable debug
		 {
		   ost.str("");
		   ost<<"create_transport_arrays: Ekin Z,A,K_electron,attach_H,strip_H: "
		       <<particle.Ekin[ip]<<" "<<particle.Z<<" "<<particle.A<<" "
		       <<particle.K_electron<<" "<<strip_H<<" "<<attach_H;
		   INFO(ost.str());
		 }
               }
	   }
	 if(101==100*particle.Z+particle.A)                         // protons
	   { 
	     fragment_p = PP_inel;
	     fragment_He= PA_inel;
	   }
	 if(-99==100*particle.Z+particle.A)                         // antiprotons
	   { 
	     fragment_p = aPP_non+aPP_ann;
	     fragment_He= aPA_non+aPA_ann;
	   }

	 if(galdef.n_spatial_dimensions==2)
	   for(int ir=0; ir<particle.n_rgrid; ir++)                   // IMOS20010816
	     for(int iz=0; iz<particle.n_zgrid; iz++)
	       particle.fragment.d2[ir] [iz].s[ip]= particle.beta[ip]*C
		 *(galaxy.n_HI.d2[ir] [iz].s[0] +2*galaxy.n_H2.d2[ir] [iz].s[0]+galaxy.n_HII.d2[ir] [iz].s[0]) 
		 *(fragment_p+galdef.He_H_ratio*fragment_He) *1.0e-27;
     	 
	 if(galdef.n_spatial_dimensions==3)
	   for(int ix=0; ix<particle.n_xgrid; ix++)                // IMOS20010816
	     for(int iy=0; iy<particle.n_ygrid; iy++)
	       for(int iz=0; iz<particle.n_zgrid; iz++)
		 particle.fragment.d3[ix][iy][iz].s[ip]= particle.beta[ip]*C
		   *(galaxy.n_HI.d3[ix][iy][iz].s[0] +2*galaxy.n_H2.d3[ix][iy][iz].s[0]+galaxy.n_HII.d3[ix][iy][iz].s[0])
		   *(fragment_p+galdef.He_H_ratio*fragment_He) *1.0e-27;
       }  //  p
   }  //  A!=0
     
   if(galdef.verbose>=2)
     {
       ost.str("");
       ost<< "fragmentation for species "<<particle.name;
       INFO(ost.str());
       particle.fragment.print();
     }

// ASSIGNING MOMENTUM LOSS RATE

   INFO("======== assigning momentum loss rate ======== ");

   if(galdef.n_spatial_dimensions==2)
   {
      for(int ir=0; ir<particle.n_rgrid; ir++)
      {
         for(int iz=0; iz<particle.n_zgrid; iz++)
         {
            for(int ip=0; ip<particle.n_pgrid; ip++)
            {
	       double aion,coul;                                      // NUCLEONS

               if(particle.A!=0) { 
                  //Enable turning off Coulomb and ionization losses individually
                  nucleon_loss(particle.Z,particle.A,particle.Etot[ip],
                        galaxy.n_HI .d2[ir] [iz].s[0] +2*galaxy.n_H2.d2[ir] [iz].s[0],
                        galaxy.n_HII.d2[ir] [iz].s[0], galdef.He_H_ratio, 
                        &aion,  &coul); // energy eV s-1 -> momentum MeV s-1

                   particle.dpdt.d2[ir] [iz].s[ip] = 0;

                   if (galdef.ionization_losses) 
                      particle.dpdt.d2[ir] [iz].s[ip] += aion;

                   if (galdef.coulomb_losses) 
                      particle.dpdt.d2[ir] [iz].s[ip] += coul;

                   particle.dpdt.d2[ir] [iz].s[ip] /= particle.beta[ip]*1.0e6;
               }
      
               if(particle.A==0)
               {
                  double uevcm3=0., bevcm3, brem1,brem2,sync,cmptn;   // ELECTRONS
		                                                                       // IMOS200008016
// test of electron propagation vs analytical calculations (only IC losses) IMOS20061030
		  if(abs(galdef.DM_int0)==99)
		    {
		      particle.dpdt.  d2[ir] [iz].s[ip]= 
			electron_loss( particle.Etot[ip], 0., 0., galdef.He_H_ratio, galdef.DM_double7, 0.,
				       &aion, &coul,&brem1,&brem2,&sync,&cmptn) *1.0e-6; // energy eV s-1 -> momentum MeV s-1
                        //32./9.*Pi*pow(Rele/Mele*1.e3,2)*C*galdef.DM_double7*pow(particle.Ekin[ip],2)*1.e-12;

		      continue;
		    }
// end of the test area

                  bevcm3=pow(galaxy.B_field.d2[ir][iz].s[0]*10000.,2)/8./Pi *erg_to_eV;// mag. energy density eV cm-3
                  particle.dpdt.  d2[ir] [iz].s[ip]= electron_loss( particle.Etot[ip],
                     galaxy.n_HI .d2[ir] [iz].s[0] +2*galaxy.n_H2.d2[ir] [iz].s[0],
                     galaxy.n_HII.d2[ir] [iz].s[0], galdef.He_H_ratio, uevcm3, bevcm3,
                     &aion, &coul,&brem1,&brem2,&sync,&cmptn)
	             / particle.beta[ip]*1.0e-6; // energy eV s-1 -> momentum MeV s-1
               }  //  A==0
// cout<<" dpdt="<<particle.dpdt.d2[ix]    [iz].s[ip]<<" aion="<<aion<<endl;
            }  //  p
         }  //  z
      }  //  r
   }

   if(galdef.n_spatial_dimensions==3)
   {
      for(int ix=0; ix<particle.n_xgrid; ix++)
      {
         for(int iy=0; iy<particle.n_ygrid; iy++)
         {
            for(int iz=0; iz<particle.n_zgrid; iz++)
            {
               for(int ip=0; ip<particle.n_pgrid; ip++)
               {
                  double aion,coul;                                        // NUCLEONS

                  if(particle.A!=0) { 
                     //Enable turning off Coulomb and ionization losses individually
                     nucleon_loss(particle.Z,particle.A,particle.Etot[ip],
                           galaxy.n_HI .d3[ix][iy][iz].s[0] +2*galaxy.n_H2.d3[ix][iy][iz].s[0],
                           galaxy.n_HII.d3[ix][iy][iz].s[0],galdef.He_H_ratio, 
                           &aion,&coul);

                     particle.dpdt.d3[ix][iy][iz].s[ip] = 0;

                     if (galdef.ionization_losses) 
                        particle.dpdt.d3[ix][iy][iz].s[ip] += aion;

                     if (galdef.coulomb_losses) 
                        particle.dpdt.d3[ix][iy][iz].s[ip] += coul;

                     particle.dpdt.d3[ix][iy][iz].s[ip] /= particle.beta[ip]*1.0e6; // energy eV s-1 -> momentum MeV s-1
                  }

                  if(particle.A==0)
                  {
		     double uevcm3=0., bevcm3=0.,brem1,brem2,sync,cmptn;   // ELECTRONS
		                                                                              // IMOS200008016
                     bevcm3=pow(galaxy.B_field.d3[ix][iy][iz].s[0]*10000.,2)/8./Pi *erg_to_eV;// mag. energy density eV cm-3
                     particle.  dpdt.d3[ix][iy][iz].s[ip]= electron_loss(particle.Etot[ip],
                        galaxy.n_HI .d3[ix][iy][iz].s[0] +2*galaxy.n_H2.d3[ix][iy][iz].s[0],
                        galaxy.n_HII.d3[ix][iy][iz].s[0],galdef.He_H_ratio, uevcm3, bevcm3,
                        &aion,&coul,&brem1,&brem2,&sync,&cmptn)
                 	/ particle.beta[ip]*1.0e-6; // energy eV s-1 -> momentum MeV s-1
        	  }  //  A==0
//  cout<<" dpdt="<<particle.dpdt.d3[ix][iy][iz].s[ip]<<" p="<<particle.p[ip] <<endl;
               }  //  p
            }  //  z
         }  //  y
      }  //  x
   }

// IF ELECTRON ADD KLEIN_NISHINA LOSSES

   if(abs(galdef.DM_int0)!=99) if(particle.A==0) e_KN_loss(particle);  // MeV s-1 IMOS20061030

   if(galdef.verbose>=2)
   {
      ost.str("");
      ost<< "dpdt for species "<<particle.name;
      INFO(ost.str());
      particle.dpdt.print();
   }

// ASSIGNING DECAY RATE

   if(particle.t_half!=0.0)
   {
      INFO("======== assigning decay rate ======== ");

      if(galdef.n_spatial_dimensions==2)
      {
         for(int ir=0; ir<particle.n_rgrid; ir++)
         {
            for(int iz=0; iz<particle.n_zgrid; iz++)
            {
               for(int ip=0; ip<particle.n_pgrid; ip++)
                  particle.decay.d2[ir][iz].s[ip]=1.0/(particle.gamma[ip]*particle.t_half*year2sec/log(2.0));
            }  // z
         }  //  r
      }

      if(galdef.n_spatial_dimensions==3)
      {
         for(int ix=0; ix<particle.n_xgrid; ix++)
         {
            for(int iy=0; iy<particle.n_ygrid; iy++)
            {
               for(int iz=0; iz<particle.n_zgrid; iz++)
               {
                  for(int ip=0; ip<particle.n_pgrid; ip++)
                     particle.decay.d3[ix][iy][iz].s[ip]=1.0/(particle.gamma[ip]*particle.t_half*year2sec/log(2.0));
               }  //  z
            }  //  y
         }  //  x
      }

      if(galdef.verbose>=1)
      {
         ost.str("");
         ost<< "decay for species "<<particle.name;
	 INFO(ost.str());
         particle.decay.print();
      }
   }  //  t_half!=0.0

   if(galdef.verbose>=1)
   {
      ost.str("");
      ost<< "primary source function for species "<<particle.name;
      INFO(ost.str());
      particle.primary_source_function.print();
   }

//particle.print();
   ost.str("");
   ost<<"============== completed creation of transport arrays for "<<particle.name;
   INFO(ost.str());
   INFO("Exit");
   return stat;
}
